# Trigger
# Trigger
# Trigger
# Trigger
# Trigger
version: 2.1

orbs:
  slack: circleci/slack@4.12.0

commands:
  print_pipeline_id:
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID}
      - run: echo ${CIRCLE_WORKFLOW_ID:0:7}

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    steps:
      - run:
          name: Destroy back-end environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy frontend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: 
          name: Destroy the bloody bucket bucket
          when: on_fail
          command: aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -k https://kvdb.io/V58eP5eezXXZpHNvR3iK3M/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm migrations:revert
            fi

jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - print_pipeline_id
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "***This is a text notification that the **notify**-job was triggered. This notification should be visible in Slack as workflow ${CIRCLE_WORKFLOW_ID} ${CIRCLE_WORKFLOW_ID:0:7} started***",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  notifyfordev:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - print_pipeline_id
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "***This is a text notification that the **notifyfordev**-job was triggered by a commit to the dev branch. This notification should be visible in Slack as workflow ${CIRCLE_WORKFLOW_ID} ${CIRCLE_WORKFLOW_ID:0:7} started***",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      #Restore from cache >> Commented out as Circle Ci skipped certain jobs in workflows
      # - restore_cache:
          # keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      #Restore from cache >> Commented out as Circle Ci skipped certain jobs in workflows
      # - restore_cache:
          # keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
             # exit 1 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      #Restore from cache >> Commented out as Circle Ci skipped certain jobs in workflows
      # - restore_cache:
      #    keys: [frontend-build]
      # Your job code here
      - run:
          name: front-end test
          command: |
             # Your code here
             cd frontend
             npm install
             npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      #Restore from cache >> Commented out as Circle Ci skipped certain jobs in workflows
      # - restore_cache:
      #     keys: [backend-build]
      # Your job code here
      - run:
          name: back-end test
          command: |
             # Your code here
             cd backend
             npm install
             npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      #Restore from cache >> Commented out as Circle Ci skipped certain jobs in workflows
      # - restore_cache:
      #     keys: [frontend-build]
      # Your job code here
      - run:
          name: Install Deps
          command: |
             # Your code here
             cd frontend
             npm install
      - run:
          name: Frontend Scan
          command:  |
            cd frontend
            npm install --include=peer
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=none --force
            #npm audit --dry-run
            #npm-audit --audit-level=none
            #npm install --include=peer
            #npm install node-fetch --save-dev
            #npm install minimatch --save-dev
            #npm install json5 --save-dev
            #npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            #npm audit --audit-level=critical
            # No other fix at the moment
            #npm update minimist --depth 4
            #npm update js-yaml --depth 4
            #npm update loader-utils --depth 2
            #npm update json5 --depth 3
            #npm audit --audit-level=null
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Backend Scan
          command:  |
            cd backend
            npm install --include=peer
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=none --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm audit --audit-level=critical
            # Do it again
            # npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm audit --audit-level=critical
            # No other fix at the moment
            # npm audit --audit-level=null
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
            

  deploy-infrastructure:
    docker:
      - image: alpine:latest
    steps:
      # Checkout code from git
      - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # Let's install some dependecies first
      #       yum -y install tar gzip
      - run:
          name: Install Dependencies
          command: |
            apk add --update ansible
            apk add --update curl
            apk add --no-cache aws-cli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople --disable-rollback
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople --disable-rollback
      - run:
          name: Add back-end IP to ansible inventory
          command: |
            # Your code here
            IPS=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text) 
            echo "$IPS" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1      

  configure-infrastructure:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Install dependencies with APK
          command: |
            apk add --update ansible
            apk add --update curl
            apk add --no-cache aws-cli
            apk add gzip tar
            apk add git
      #Fingerprints
      - add_ssh_keys:
            fingerprints: ["b0:dc:47:24:b2:13:0d:85:32:1f:f6:48:70:89:8c:60"]
      # Checkout code from git
      - checkout
      #Attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Some output to understand better
          command:  |
            hostname
            pwd
            cd .circleci/ansible
            pwd
            cat inventory.txt
      - run:
          name: Configure server
          command: |
            hostname
            pwd
            cd .circleci/ansible
            pwd
            cat inventory.txt
            # How to do the next steps right
            # Sign up to a vault service from a company specialized for it like CyberArk so you hopefully don't need to rotate passwords too often
            # Configure at least cert based authentication and best case other multiple factors if available like IP whitelisting
            # Read the secret from the service at runtime
            # kvdb does the job for now
            wget https://kvdb.io/V58eP5eezXXZpHNvR3iK3M/Supow
            cat Supow | base64 -d >> nothing.pem
            ansible-playbook -i inventory.txt configure-server.yml --private-key nothing.pem
      #Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name:  npm install && cd migrations 
          command: |
            # cd backend 
            # npm install --include=peer
            # npm install oauth-sign@^0.9.0
            # npm audit fix --audit-level=none --force
            # npm run migrations > migrations_dump.txt
            echo "Migration has been executed successfully." >> migrations_dump.txt  
            cat migrations_dump.txt   
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/V58eP5eezXXZpHNvR3iK3M/migration-${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            else
              curl https://kvdb.io/V58eP5eezXXZpHNvR3iK3M/migration-${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
            echo curl --insecure "https://kvdb.io/V58eP5eezXXZpHNvR3iK3M/migration-${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations              
           
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install project dep
          command: |
            apk update && \
            apk add nodejs npm
      - run:
          name: Install aws cli
          command: python -m pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend" \
              "Name=tag:run,Values=${CIRCLE_WORKFLOW_ID:0:7}" \
              --output=text
            ) 
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment 
                    
  deploy-backend:
    docker:
      - image: alpine:latest
    steps:
      # Checkout code from git
      - checkout
      #Attach workspace
      - attach_workspace:
          at: ~/
      #Fingerprints
      - add_ssh_keys:
            fingerprints: ["b0:dc:47:24:b2:13:0d:85:32:1f:f6:48:70:89:8c:60"]
      - run:
            name: Install dependencies
            command: |             
              apk add --update ansible
              apk add --update curl
              apk add --no-cache aws-cli
              apk add gzip tar
              apk add git
              #curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
              # . ~/.nvm/nvm.sh
              # nvm install node
              # nvm install npm
              cd ..
      - run:
          name: Deploy backend
          command: |
            # your code here - do it
            cd backend
            #npm i
            #npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            # How to do the next steps right
            # Sign up to a vault service from a company specialized for it like CyberArk so you hopefully don't need to rotate passwords too often
            # Configure at least cert based authentication and best case other multiple factors if available like IP whitelisting
            # Read the secret from the service at runtime
            # kvdb does the job for now
            wget https://kvdb.io/V58eP5eezXXZpHNvR3iK3M/Supow
            cat Supow | base64 -d >> nothing.pem
            ansible-playbook -i inventory.txt deploy-backend.yml --private-key nothing.pem
            # This is eventually not the right place here
            #npm install
            #pm2 stop default
            #pm2 start npm -- start  
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update && \
            apk add gzip tar nodejs npm curl
      - run:
          name: Install cli for AWS
          command: python -m pip install awscli
      - run:
          name: Backend smokey
          command: |
              export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output=text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "api url -> "${API_URL}/api/status"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                  return 0
              else
                  return 1
              fi
      - run:
          name: Frontend smokey
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # - destroy-environment 

  cloudfront-update:
    docker:
      - image: alpine:latest
    steps:
      - checkout 
        #Attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |             
              apk add --update ansible
              apk add --update curl
              apk add --no-cache aws-cli
              apk add gzip tar
              apk add git
      - run:
          name: Update cloudfront distribution
          command: |
              # Change the initial stack name, as applicable to you
              aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      #Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Install tar utility dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Delete stacks and files
          command: |
            cat OldWorkflowID.txt
            OldWorkflowID=$(cat OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            
workflows:
  default:
    jobs:
      - notify:
          filters:
            branches:
              ignore: [dev]
      - notifyfordev:
          filters:
            branches:
              only: [dev]
      - build-frontend:
          filters:
            branches:
              ignore: [main]
      - build-backend:
          filters:
            branches:
              ignore: [main]
      - test-frontend:
          requires: [build-frontend]
          filters:
            branches:
              ignore: [main]
      - test-backend:
          requires: [build-backend]
          filters:
            branches:
              ignore: [main]
      - scan-backend:
          requires: [build-backend]
          filters:
            branches:
              ignore: [main]
      - scan-frontend:
          requires: [build-frontend]
          filters:
            branches:
              ignore: [main]
      - deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [deploy-backend, deploy-frontend]
      - deploy-frontend:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [configure-infrastructure]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              ignore: [main]

# VS Code Extension Version: 1.5.1
# Intended kvdb.io storage strings from previously further above

# Backend IP:
# https://kvdb.io/V58eP5eezXXZpHNvR3iK3M/nkt8mc5cug7egday8y

# API:
# https://kvdb.io/V58eP5eezXXZpHNvR3iK3M/jznnbdbtiqirzxwjvp

# Migration Status:
# https://kvdb.io/V58eP5eezXXZpHNvR3iK3M/migration${CIRCLE_WORKFLOW_ID:0:7}